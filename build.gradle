buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url = "https://repo.spongepowered.org/repository/forge-proxy"
        }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

plugins {
    id "maven-publish"
    id "de.fuerstenau.buildconfig" version "1.1.8"
}

// We apply the 'forge' plugin, so ForgeGradle can do it's stuff.
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'



repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        mavenCentral()
        name "LatvianModder Ivy"
        url = "https://maven.latmod.com/"
    }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
//    maven {
//        url "http://tehnut.info/maven"
//    }
//    maven {
//        url 'http://minecraft.curseforge.com/api/maven/'
//    }
    maven {
        url 'https://maven.covers1624.net'
    }

    maven {
        url 'http://chickenbones.net/maven/'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    repositories {
        maven {
            url "https://cursemaven.com"
        }
    }
    flatDir {
        dirs 'libs'
    }
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = minecraft_version + "-" + forge_version
    mappings = mcp_mappings
    runDir = "run"
    String resolved_core_plugin = mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
    clientJvmArgs += "-Dfml.coreMods.load=${resolved_core_plugin}"
    serverJvmArgs += "-Dfml.coreMods.load=${resolved_core_plugin}"
    String resolved_core_config = mod_mixin_configs.replace('${mod_id}', mod_id)
    clientRunArgs += "--mixin ${resolved_core_config}"
    serverRunArgs += "--mixin ${resolved_core_config}"
    replaceIn "MineFantasyReforged.java"
    replace "@VERSION@", "${project.minecraft.version}-${project.major}.${project.minor}." + getPatchNumber() + getStable()
}
version = minecraft.version + "-" + project.major + "." + project.minor + "." + getPatchNumber() + getStable()
group = "minefantasy.mfr.MineFantasyReforged" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "minefantasyreforged"

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    embed('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }

    // Compile against the JEI API but do not include it at runtime
    deobfProvided "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    // At runtime, use the full JEI jar
    runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"

    deobfCompile "codechicken:CodeChickenLib:1.12.2-3.2.3.358:deobf"

}

buildConfig {
    appName = project.name       // sets value of NAME field
    version = project.version // sets value of VERSION field,

    clsName = 'BuildConfig'      // sets the name of the BuildConfig class
    packageName = 'minefantasy.mfr'  // sets the package of the BuildConfig class,
    charset = 'UTF-8'            // sets charset of the generated class,

    buildConfigField 'boolean', 'UNSTABLE', {isUnstable()}
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//task prepareAssets(type: Copy) {
//    group = 'build'
//    from project.file('src/main/resources')
//    into project.file('build/classes/java/main')
//}
//classes.dependsOn(prepareAssets)

jar {
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes([
                "FMLAT": "minefantasyreforged_at.cfg",
                "MixinConfigs": "mixins.minefantasyreforged.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "FMLCorePlugin": "minefantasy.mfr.mixin.MFRCoreMod",
                "FMLCorePluginContainsFMLMod": "false",
                "ForceLoadAsMod": "true"
        ])
    }
}

mixin {
    add sourceSets.main, mod_mixin_refmap.replace('${mod_id}', mod_id)
}

def getPatchNumber() {
    if (System.getenv("BUILD_NUMBER") != null) {
        return System.getenv("BUILD_NUMBER").toString()
    }
    return project.minor
}

def getStable() {
    if (isUnstable()) {
        return "-BETA"
    }
    return ""
}

def isUnstable() {
    return true;
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/TeamMFR/MineFantasyReforged"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId 'minefantasyreforged'
            from(components.java)
        }
    }
}

// TODO: check the deprecated warnings
// running a regular Build could possibly show them too
// disabled for now, this prints all deprecated warnings to the console so that we can get rid of them eventually
//allprojects {
//    tasks.withType(JavaCompile) {
//        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
//    }
//}
